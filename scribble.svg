<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg x="0" y="0" width="100%" height="100%" viewBox="0 0 100% 100%" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink" onload="init()">
    <defs>
        <script type="application/ecmascript">
            <![CDATA[
            let points=[];
			let curves=[];
            let paths=[];
            function init(){
				document.documentElement.addEventListener("contextmenu",function(e){
					e.preventDefault();
				},false);
				document.getElementById("panel").addEventListener("mousemove",move,false);
                document.getElementById("panel").addEventListener("mousedown",down,false);
				document.getElementById("btn1").addEventListener("click",click,false);
             }
            function click(evt){
                for(let i=0;i<curves.length;i++){
					for(let j=0;j<curves[i].length;j++){
						document.documentElement.removeChild(curves[i][j]);
					}
                }
				for(let i=0;i<paths.length;i++){
					document.documentElement.removeChild(paths[i]);
				}
				paths=[];
				points=[];	
            }
            function move(evt){
                if(points.length>1){
                    points[points.length-1][0][0]=points[points.length-1][1][0]=points[points.length-1][2][0]=evt.clientX;
                    points[points.length-1][0][1]=points[points.length-1][1][1]=points[points.length-1][2][1]=evt.clientY;
                }
                if(points.length>2){
                    FillBezierControls();
                }
                if(points.length>1){
                    let p0=points[points.length-1][1];
                    let c01=points[points.length-1][0];
                    let c02=points[points.length-1][2];
                    let p1=points[points.length-2][1];
                    let c11=points[points.length-2][0];
                    let c12=points[points.length-2][2];
                    paths[paths.length-1].setAttribute(
                        "d", 
                        `M${p1[0]},${p1[1]}C${c12[0]},${c12[1]} ${c01[0]},${c02[1]} ${p0[0]},${p0[1]}`
                    );   
                }
                if(points.length>2){
                    let p1=points[points.length-2][1];
                    let c11=points[points.length-2][0];
                    let c12=points[points.length-2][2];
                    let p2=points[points.length-3][1];
                    let c21=points[points.length-3][0];
                    let c22=points[points.length-3][2];
                    paths[paths.length-2].setAttribute(
                        "d", 
                        `M${p2[0]},${p2[1]}C${c22[0]},${c22[1]} ${c11[0]},${c11[1]} ${p1[0]},${p1[1]}`
                    );
                }
            }
            function down(evt){
                if(evt.button==0){
					if(evt.detail==1){
						points.push([[evt.clientX,evt.clientY],[evt.clientX,evt.clientY],[evt.clientX,evt.clientY]]);
						if(points.length>1){
							paths.push(document.createElementNS(document.documentElement.namespaceURI,"path"));
							paths[paths.length-1].style.cssText="stroke:black;fill:none;pointer-events:none;";
							let p0=points[points.length-1][1];
							let c01=points[points.length-1][0];
							let c02=points[points.length-1][2];
							let p1=points[points.length-2][1];
							let c11=points[points.length-2][0];
							let c12=points[points.length-2][2];
							paths[paths.length-1].setAttribute(
								"d", 
								`M${p1[0]},${p1[1]}C${c12[0]},${c12[1]} ${c01[0]},${c02[1]} ${p0[0]},${p0[1]}`
							);   
							document.documentElement.appendChild(paths[paths.length-1]);
						}
					}
                 }else if(evt.button==2){
					curves.push(paths);
					//for(let i=0;i<paths.length;i++){
					//	document.documentElement.removeChild(paths[i]);
					//}
					paths=[];
					points=[];
				 }
            }
            function FillBezierControls()
            {
                let p0=points[points.length-2][1];//倒数第二个点
                let p1=points[points.length-3][1];//倒数第三个点
                let p2=points[points.length-1][1];//倒数第一个点
                let p3=[(p1[0]+p0[0])/2,(p1[1]+p0[1])/2];//前中点
                let p4=[(p2[0]+p0[0])/2,(p2[1]+p0[1])/2];//后中点
                let k1=Math.sqrt((p0[0]-p1[0])*(p0[0]-p1[0])+(p0[1]-p1[1])*(p0[1]-p1[1]))/Math.sqrt((p0[0]-p2[0])*(p0[0]-p2[0])+(p0[1]-p2[1])*(p0[1]-p2[1]));//两线段长度比
                let p5=[(p3[0]+p4[0]*k1)/(k1+1),(p3[1]+p4[1]*k1)/(k1+1)];// 按两线段长度比决定中点连线上一点
                let p6=[p0[0]-p5[0]+p3[0],p0[1]-p5[1]+p3[1]];//中点连线平移后前端点
                let p7=[p0[0]-p5[0]+p4[0],p0[1]-p5[1]+p4[1]];//中点连线 平移后后端点
                let k2=0.25;//平移线段缩小比例
                let p8=[p6[0]+k2*(p0[0]-p6[0]),p6[1]+k2*(p0[1]-p6[1])];//前控制点
                let p9=[p7[0]+k2*(p0[0]-p7[0]),p7[1]+k2*(p0[1]-p7[1])];//后控制点
                points[points.length-2][0]=p8;
                points[points.length-2][2]=p9;
            }
            ]]>
        </script>
    </defs>
    <rect x="0" y="0" id="panel" style="fill:lightblue;stroke:black;stroke-width:1px;" width="100%" height="100%" />
    <g id="btn1" transform="translate(20,20)">
        <rect x="0" y="0" width="100" height="30" rx="10" ry="10" style="fill:blue;" />
        <a xlink:href="">
            <text x="50" y="15"
                style="fill:lightblue;font-family:sans-serif;text-anchor:middle;dominant-baseline:middle">Clear</text>
        </a>
    </g>
</svg>